# -*- python -*-
# ex: set syntax=python:

# NOTE: MacOS has DNS issues when this script is started from cron.
# Hostnames must be given numerically.

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
  BuildSlave("fir1", "fill",
	notify_on_missing="jpritikin@virginia.edu"),
  BuildSlave("fir2", "fill",
	notify_on_missing="jpritikin@virginia.edu"),
  BuildSlave("fir3", "fill",
	notify_on_missing="jpritikin@virginia.edu"),
  BuildSlave("fir4", "fill",
	notify_on_missing="jpritikin@virginia.edu"),
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

# macos has issues with DNS, so just hardcode IP addr of gitorious
c['change_source'].append(GitPoller(
        'git://87.238.52.168/openmx/openmx.git',
        branches=['proposed'],
        pollinterval=30))

# github
c['change_source'].append(GitPoller(
        'git://192.30.252.131/OpenMx/OpenMx.git',
        branches=['master'],
        pollinterval=30))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers import timed
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="proposed",
                            change_filter=filter.ChangeFilter(branch='proposed'),
                            treeStableTimer=10,
                            builderNames=["runtests"]))
#c['schedulers'].append(SingleBranchScheduler(
#                            name="master",
#                            change_filter=filter.ChangeFilter(branch='master'),
#                            treeStableTimer=300,
#                            builderNames=["runtests"]))
c['schedulers'].append(timed.Nightly(
                            name="nightly",
			    branch="master",
                            change_filter=filter.ChangeFilter(branch='master'),
			    onlyIfChanged=True,
                            hour=22,
                            builderNames=["nightly"]))

def mergeRequests(builder, req1, req2):
    "any requests with the same branch can be merged"
    return req1.source.branch == req2.source.branch

c['mergeRequests'] = mergeRequests

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig

factory = BuildFactory()
factory.addStep(Git(repourl='git://87.238.52.168/openmx/openmx.git',
	mode='full'))
factory.addStep(ShellCommand(usePTY=True, timeout=None,
	command=['/home/jnp3bc/bin/test-openmx1', 'runtests']))

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
      slavenames=["fir1","fir2","fir3","fir4"],
      factory=factory))

factory = BuildFactory()
factory.addStep(Git(repourl='git://192.30.252.131/OpenMx/OpenMx.git',
	mode='full'))
factory.addStep(ShellCommand(usePTY=True, timeout=None,
	command=['/home/jnp3bc/bin/test-openmx1', 'nightly']))

c['builders'].append(
    BuilderConfig(name="nightly",
      slavenames=["fir1","fir2","fir3","fir4"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

c['status'].append(html.WebStatus(http_port=8010))

from buildbot.status import mail
m = mail.MailNotifier(fromaddr="openmx@euterpe.psyc.Virginia.EDU",
			sendToInterestedUsers=False,
		extraRecipients=["openmx-developers@list.mail.virginia.edu"],
			builders=["nightly"],
			mode="failing",
                      )
c['status'].append(m)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OpenMx"
c['titleURL'] = "http://openmx.ssri.psu.edu/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://euterpe.psyc.virginia.edu:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
