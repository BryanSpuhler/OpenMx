#!/usr/bin/perl

use strict;
use warnings;
use Fatal qw(open);

my $source = shift @ARGV;
my $dest = $source;
$dest =~ s/\.rst$/.R/;
my $tmp = "$dest.new";
open(my($in), '<', $source);
open(my($out), ">", $tmp);

my @lines = <$in>;
my $code;

sub require_openmx {
    our $openmx;
    if ($openmx) { return }
    print $out "library(OpenMx)\n";
    $openmx = 1;
}

my $next_block_is_verbatim;
for (my $lx=0; $lx < @lines; ++$lx) {
    my $l = $lines[$lx];
    if (!$code) {
	if ($l =~ /^\.\.\s+cssclass\:\:\s+output\s*$/ && $lines[1+$lx] =~ /^\.\.\s*$/) {
	    $next_block_is_verbatim = 1;
	    ++ $lx;
	}
	if ($l =~ /^\.\.\s*$/ or $l =~ /^\.\.\s+code-block\:\:\s+r\s*$/) {
	    if ($next_block_is_verbatim) {
		$next_block_is_verbatim = 0;
	    } else {
		$code = 1;
	    }
	}
	next;
    } else {
	if ($l =~ /^\s*$/) {
	    require_openmx();
	    print $out $l;
	    next;
	} elsif ($l =~ /^\s+/) {
	    if ($l =~ /DO NOT EXECUTE/) { last }
	    if ($l =~ /\:linenos\:/) { next }
	    require_openmx();
	    print $out $l;
	    next;
	} elsif ($l =~ /^\.\.\s*$/ or $l =~ /^\.\.\s+code-block\:\:\s+r\s*$/) {
	    # consecutive code blocks
	    next;
	} else {
	    $code = 0;
	    next;
	}
    }
}
